
timing_output_pin: 34
recording_indicator_pin: 36
#mirror_pin:

# A 2-way valve that normally dumps [potentially pre-diluted in air] CO2 directly to a
# vacuum, but directs it into the odor needle manifold when switched.
# Assumed that total flow rate through this valve is equal to flowrate through any one
# of the other active odor manifolds, so that the total flow can be balanced by opening
# any of the disconnected outputs on one of the other manifolds (and closing the
# corresponding NO valve).
co2_pin: 53

# TODO rewire both of my manifolds such that one of the db9 connectors uses 8
# pins for valves (and maybe have balance be first/last pin on each?)
# rather than two db9 each handling 6 valves, so 2 manifold case can use 16
# valves (and is that the max driveable w/ 2 of the valve driving chips i'm
# using? or are they 10 channels each?)

# Top row of Remy's second (back) manifold that I had been working with, wired into the
# yellow-tape-labelled DB9 cable to my newest (as of start of 2021) electronics
# assembly.
available_group1_valve_pins: [37, 38, 39, 40, 41]
group1_balance_pin: 42
# Right (of 2 lower) MFC (one that is hard to see around the box)
group1_flow_controller_address: J

# Top row of the (left/close) manifold that I bought and assembled fully
# myself. Connected to the DB9 cable WITHOUT the yellow tape, also connected to
# my newest electronics. If the bottom row of this manifold (also via the cable
# with the yellow tape) is connected, that configuration corresponds to
# single_manifold2.yaml.
available_group2_valve_pins: [45, 46, 47, 48, 49]
group2_balance_pin: 50
# Left (of 2 lower) MFC.
group2_flow_controller_address: I

# The MFC in the back, on taller posts.
carrier_flow_controller_address: H

# (was) Commented just so generated outputs won't have flow stuff at all.
# Would work without this, but outputs would be a bit more cluttered when manually
# inspecting / editing.
#
# Tuples of USB (vendor ID, product ID) for USB-to-serial adapters that will only
# contain MFCs behind them (or equipment that you wouldn't mind sending ~arbitrary
# serial commands to).
#
# how to get vendor/product IDs on windows/linux:
# https://superuser.com/questions/1106247
#
# linux: `lsbusb`
# windows: Device manager -> find device + right click on it -> Properties -> Details ->
# Hardware IDs (from drop down) (should look like "HID\VID_0403&PID_6001")
#
# (they will be in the form of 4 hexadecimal digits, which you should convert to
# decimal)
# TODO support [+test] specifying as hex here?
#
# in listed device IDs below (in comments), the decimal version of each ID is in parens
#
# VID=0x14B0 (5296), PID=0x3410 (13328): older 4-port (also, I thought) StarTech device.
# TODO get other model #s / identifiers off this older box.
# (there might have been 2 such older devices, maybe only one of which was working for
# me?)
#
# VID=0x0403 (1027), PID=0x6001 (24577): newer StarTech 8 port device (ICUSB2328I on
#   bottom [not sure if last character is 1/l/I], as well as 609100737 on warranty
#   sticker)
safe_usb_ids_to_check_for_mfcs: [[1027, 24577], [5296, 13328]]

